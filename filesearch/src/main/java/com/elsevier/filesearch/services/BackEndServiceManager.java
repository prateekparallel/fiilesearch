package com.elsevier.filesearch.services;

import java.io.BufferedReader;
import java.io.File;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.springframework.http.HttpStatus;

import com.elsevier.filesearch.beans.FileSearchResult;
import com.elsevier.filesearch.exception.FileSearchException;

/**
 * This class implements Back end service to execute 
 * a backend python process to generate reports on
 * maximum occurance of a word provided as query param.
 * @author prate
 *
 */
public class BackEndServiceManager implements BackEndService{

	/**
	 * Below method will execute a back end pyhon process (job)
	 * as per parameter provided from this web service application.
	 * it return the name of the file generated by this method
	 * with values generated by the backend job
	 */
	@Override
	public String runBackEndProcess(String[] args) throws Exception {
		
		String executor = args[0];
		String program = args[1];
		String directoryPath = args[2];
		String fileNametoSearch = args[3];
		String fileExtension = args[4];
		String wordToFind = args[5];
		String outPutfile = args[6];
		
		ProcessBuilder pb = null;
		
		if(wordToFind.isEmpty()) {
			Exception e = new Exception("Word to search must be provided");
			throw e;
		}
		
		if(fileNametoSearch.isEmpty() && !fileExtension.isEmpty() ) {
			String[] command ={ executor, program, "-d", directoryPath, "-e", fileExtension, "-w", wordToFind };
			pb = new ProcessBuilder(command);
		}
		else if(fileExtension.isEmpty() && !fileNametoSearch.isEmpty()) {
			String[] command ={ executor, program, "-d", directoryPath, "-f", fileNametoSearch, "-w", wordToFind };
			pb = new ProcessBuilder(command);
		}
		else if(fileNametoSearch.isEmpty() && fileExtension.isEmpty() ) {
			String[] command ={ executor, program, "-d", directoryPath, "-w", wordToFind };
			pb = new ProcessBuilder(command);
		}
		else {
			String[] command ={ executor, program, "-d", directoryPath, "-f", fileNametoSearch, "-e", fileExtension, "-w",wordToFind };
			pb = new ProcessBuilder(command);
		}
		
		pb.redirectOutput(new File(outPutfile));
		try {
		    Process p = pb.start();
		    p.waitFor();       

		} catch (InterruptedException e) {
		    throw e;
		}catch (Exception e1) {
		    throw e1;
		}
		
		return outPutfile;
	}

	/**
	 * Below method will call runBackEndProcess which will execute a backend python job.
	 * The backend python job will search all the files and finds out a file which 
	 * contains maximum occurance of a word provided by a client application through 
	 * RESTFul call and generate a json response and return it back to the client
	 */
	@Override
	public FileSearchResult processBackEndService(String[] args) throws FileSearchException{

		String filePath = null;
		FileSearchResult fsResult = null;
		
		try {
				filePath = runBackEndProcess(args);
				fsResult = generateResult(filePath);
		}catch(Exception e) {
			FileSearchException fe = new FileSearchException(e.getMessage());
			if(e.getMessage().contains("not found"))
				fe.setErrorCode(HttpStatus.NOT_FOUND);
			throw fe;
		}
			
		return fsResult;
		
	}
	
	/**
	 * The below method will read the file generated by method runBackEndProcess
	 * and store each value into FileSearchResult object and return it back to 
	 * the caller
	 * @param filePath
	 * @return FileSearchResult object
	 * @throws Exception
	 */
	private FileSearchResult generateResult(String filePath) throws Exception {	
        Path path = Paths.get(filePath);
        BufferedReader br = Files.newBufferedReader(path, StandardCharsets.UTF_8);
        FileSearchResult fsResult = new FileSearchResult();
        fsResult.setFileName(br.readLine());
		fsResult.setWordFound(Integer.parseInt(br.readLine()));
       
		if(fsResult.getFileName().isEmpty()) {
			Exception e = new Exception("Either File or search word not found in file system");
			throw e;
		}
		
        br.close();		
		
		return fsResult;
	}

}
